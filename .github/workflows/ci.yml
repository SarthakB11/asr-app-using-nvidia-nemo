name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Create and activate virtual environment
        run: |
          python -m venv .venv
          source .venv/bin/activate
      - name: Install dependencies
        run: |
          source .venv/bin/activate # Activate venv again for this step
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install FFmpeg
        run: |
          sudo apt update
          sudo apt install -y ffmpeg
      - name: Lint with flake8
        run: |
          source .venv/bin/activate # Activate venv again for this step
          pip install flake8
          flake8 app/ scripts/
      - name: Start FastAPI application
        run: |
          source .venv/bin/activate
          # Start uvicorn in the background using &
          # nohup is used to prevent the process from being killed if the parent shell exits
          # We redirect output to a file and run in the background
          nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          # Give the server a moment to start up
          sleep 5
        # Set a timeout for this step if the app doesn't start properly
        timeout-minutes: 1
      - name: Run tests
        run: |
          source .venv/bin/activate # Activate venv again for this step
          # Add your test scripts here
          python scripts/test_transcription.py --num-files 1 || true
      - name: Stop FastAPI application (optional, good practice)
        # This step ensures the background process is terminated cleanly
        # Use `pkill` to kill processes named 'uvicorn'
        if: always() # Run this even if previous steps fail
        run: |
          pkill -f uvicorn || true # '|| true' to prevent failure if uvicorn isn't found
      - name: Build Docker image
        run: |
          docker build -t hindi-asr-app .